/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/xrpool.gltf
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'

const XRPool = (props) => {
  const { nodes, materials } = useGLTF('/models/xrpool.gltf')


  const customShader = {
    uniforms: {
      opacity: { value: 0.5 },
    },
    vertexShader: `
      void main() {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      uniform float opacity;
  
      void main() {
        // Read depth from the depth buffer
        float depth = gl_FragCoord.z / gl_FragCoord.w;
  
        // Calculate the opacity based on the depth
        float newOpacity = smoothstep(0.0, 0.01, depth);
  
        // Set the output color to white with the custom opacity
        gl_FragColor = vec4(1.0, 1.0, 1.0, newOpacity * opacity);
      }
    `,
    blending: THREE.CustomBlending,
    blendSrc: THREE.OneMinusDstAlphaFactor,
    blendDst: THREE.OneMinusSrcAlphaFactor,
    blendSrcAlpha: THREE.OneMinusDstAlphaFactor,
    blendDstAlpha: THREE.OneMinusSrcAlphaFactor,
  };
  
  const transparentMaterial = new THREE.ShaderMaterial(customShader);
  




  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.pool_body.geometry} material={materials['pool tiles']} position={[0, -0.29, 0]} />
      <mesh geometry={nodes.pool_edge_tile.geometry} material={materials['pool edge tiles']} position={[0, -0.29, 0]} />
      <mesh geometry={nodes.Steel_Stairs.geometry} material={materials['Stainless steel']} position={[-0.28, 0.02, 0.57]} />
      <mesh geometry={nodes.surrounding.geometry} material={transparentMaterial} position={[0, -0.29, 0]} />
    
    </group>
  ) 
}

export default XRPool

useGLTF.preload('/models/xrpool.gltf')
